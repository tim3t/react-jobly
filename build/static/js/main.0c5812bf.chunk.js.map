{"version":3,"sources":["hooks/useLocalStorage.js","auth/UserContext.js","routes-nav/Navigation.js","homepage/Homepage.js","common/SearchForm.js","api/api.js","companies/CompanyCard.js","common/LoadingSpinner.js","companies/CompanyList.js","jobs/JobCard.js","jobs/JobCardList.js","jobs/JobList.js","companies/CompanyDetail.js","common/Alert.js","auth/LoginForm.js","profiles/ProfileForm.js","auth/SignupForm.js","routes-nav/PrivateRoute.js","routes-nav/Routes.js","App.js","serviceWorker.js","index.js"],"names":["useLocalStorage","key","firstValue","initialValue","localStorage","getItem","useState","item","setItem","useEffect","console","debug","removeItem","UserContext","React","createContext","Navigation","logout","currentUser","useContext","className","to","onClick","first_name","username","Homepage","firstName","SearchForm","searchFor","searchTerm","setSearchTerm","onSubmit","evt","preventDefault","trim","undefined","name","placeholder","value","onChange","target","type","BASE_URL","process","REACT_APP_BASE_URL","JoblyApi","endpoint","data","method","url","headers","Authorization","token","params","axios","error","response","message","Array","isArray","this","request","res","user","companies","handle","company","title","jobs","id","CompanyCard","description","logoUrl","src","alt","LoadingSpinner","i","CompanyList","setCompanies","search","getCompanies","length","map","c","JobCard","salary","equity","companyName","hasAppliedToJob","applyToJob","applied","setApplied","digitsRev","salaryStr","toString","push","reverse","join","formatSalary","disabled","JobCardList","apply","job","JobList","setJobs","getJobs","CompanyDetail","useParams","setCompany","getCompany","Alert","messages","role","LoginForm","login","history","useHistory","password","formData","setFormData","formErrors","setFormErrors","handleSubmit","result","success","errors","handleChange","l","autoComplete","required","ProfileForm","setCurrentUser","lastName","email","saveConfirmed","setSaveConfirmed","profileData","saveProfile","updatedUser","f","SignupForm","signup","PrivateRoute","exact","path","children","Routes","register","App","infoLoaded","setInfoLoaded","Set","applicationIds","setApplicationIds","setToken","signupData","loginData","has","jwt","decode","getCurrentUser","applications","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.0c5812bf.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\n/** Custom hook for keeping state data synced with localStorage.\n *\n * This creates `item` as state and look in localStorage for current value\n * (if not found, defaults to `firstValue`)\n *\n * When `item` changes, effect re-runs:\n * - if new state is null, removes from localStorage\n * - else, updates localStorage\n *\n * To the component, this just acts like state that is also synced to/from\n * localStorage::\n *\n *   const [myThing, setMyThing] = useLocalStorage(\"myThing\")\n */\n\nfunction useLocalStorage(key, firstValue = null) {\n  const initialValue = localStorage.getItem(key) || firstValue;\n\n  const [item, setItem] = useState(initialValue);\n\n  useEffect(function setKeyInLocalStorage() {\n    console.debug(\"hooks useLocalStorage useEffect\", \"item=\", item);\n\n    if (item === null) {\n      localStorage.removeItem(key);\n    } else {\n      localStorage.setItem(key, item);\n    }\n  }, [key, item]);\n\n  return [item, setItem];\n}\n\nexport default useLocalStorage;\n","import React from \"react\";\n\n/** Context: provides currentUser object and setter for it throughout app. */\n\nconst UserContext = React.createContext();\n\nexport default UserContext;\n","import React, { useContext } from \"react\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport UserContext from \"../auth/UserContext\";\nimport \"./Navigation.css\";\n\n/** Navigation bar for site. Shows up on every page.\n *\n * When user is logged in, shows links to main areas of site. When not,\n * shows link to Login and Signup forms.\n *\n * Rendered by App.\n */\n\nfunction Navigation({ logout }) {\n  const { currentUser } = useContext(UserContext);\n  console.debug(\"Navigation\", \"currentUser=\", currentUser);\n\n  function loggedInNav() {\n    return (\n        <ul className=\"navbar-nav ml-auto\">\n          <li className=\"nav-item mr-4\">\n            <NavLink className=\"nav-link\" to=\"/companies\">\n              Companies\n            </NavLink>\n          </li>\n          <li className=\"nav-item mr-4\">\n            <NavLink className=\"nav-link\" to=\"/jobs\">\n              Jobs\n            </NavLink>\n          </li>\n          <li className=\"nav-item mr-4\">\n            <NavLink className=\"nav-link\" to=\"/profile\">\n              Profile\n            </NavLink>\n          </li>\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to=\"/\" onClick={logout}>\n              Log out {currentUser.first_name || currentUser.username}\n            </Link>\n          </li>\n        </ul>\n    );\n  }\n\n  function loggedOutNav() {\n    return (\n        <ul className=\"navbar-nav ml-auto\">\n          <li className=\"nav-item mr-4\">\n            <NavLink className=\"nav-link\" to=\"/login\">\n              Login\n            </NavLink>\n          </li>\n          <li className=\"nav-item mr-4\">\n            <NavLink className=\"nav-link\" to=\"/signup\">\n              Sign Up\n            </NavLink>\n          </li>\n        </ul>\n    );\n  }\n\n  return (\n      <nav className=\"Navigation navbar navbar-expand-md\">\n        <Link className=\"navbar-brand\" to=\"/\">\n          Jobly\n        </Link>\n        {currentUser ? loggedInNav() : loggedOutNav()}\n      </nav>\n  );\n}\n\nexport default Navigation;\n","import React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport './Homepage.css';\nimport UserContext from '../auth/UserContext';\n\n/** Homepage of site.\n *\n * Shows welcome message or login/register buttons.\n *\n * Routed at /\n *\n * Routes -> Homepage\n */\n\nfunction Homepage() {\n\tconst { currentUser } = useContext(UserContext);\n\tconsole.debug('Homepage', 'currentUser=', currentUser);\n\n\treturn (\n\t\t<div className='Homepage'>\n\t\t\t<div className='container text-center'>\n\t\t\t\t<h1 className='mb-4 font-weight-bold'>Jobly</h1>\n\t\t\t\t<p className='lead'>Nonsense jobs for a nonsense world...</p>\n\t\t\t\t{currentUser ? (\n\t\t\t\t\t<h2>Welcome Back, {currentUser.firstName || currentUser.username}!</h2>\n\t\t\t\t) : (\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<Link className='btn btn-primary font-weight-bold mr-3' to='/login'>\n\t\t\t\t\t\t\tLog in\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t<Link className='btn btn-primary font-weight-bold' to='/signup'>\n\t\t\t\t\t\t\tSign up\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</p>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Homepage;\n","import React, { useState } from \"react\";\nimport \"./SearchForm.css\";\n\n/** Search widget.\n *\n * Appears on CompanyList and JobList so that these can be filtered\n * down.\n *\n * This component doesn't *do* the searching, but it renders the search\n * form and calls the `searchFor` function prop that runs in a parent to do the\n * searching.\n *\n * { CompanyList, JobList } -> SearchForm\n */\n\nfunction SearchForm({ searchFor }) {\n  console.debug(\"SearchForm\", \"searchFor=\", typeof searchFor);\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  /** Tell parent to filter */\n  function handleSubmit(evt) {\n    // take care of accidentally trying to search for just spaces\n    evt.preventDefault();\n    searchFor(searchTerm.trim() || undefined);\n    setSearchTerm(searchTerm.trim());\n  }\n\n  /** Update form fields */\n  function handleChange(evt) {\n    setSearchTerm(evt.target.value);\n  }\n\n  return (\n      <div className=\"SearchForm mb-4\">\n        <form className=\"form-inline\" onSubmit={handleSubmit}>\n          <input\n              className=\"form-control form-control-lg flex-grow-1\"\n              name=\"searchTerm\"\n              placeholder=\"Enter search term..\"\n              value={searchTerm}\n              onChange={handleChange}\n          />\n          <button type=\"submit\" className=\"btn btn-lg btn-primary\">\n            Submit\n          </button>\n        </form>\n      </div>\n  );\n}\n\nexport default SearchForm;\n","import axios from 'axios';\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || 'http://localhost:3001';\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n\t// the token for interactive with the API will be stored here.\n\tstatic token;\n\n\tstatic async request(endpoint, data = {}, method = 'get') {\n\t\tconsole.debug('API Call:', endpoint, data, method);\n\n\t\tconst url = `${BASE_URL}/${endpoint}`;\n\t\tconst headers = { Authorization: `Bearer ${JoblyApi.token}` };\n\t\tconst params = method === 'get' ? data : {};\n\n\t\ttry {\n\t\t\treturn (await axios({ url, method, data, params, headers })).data;\n\t\t} catch (err) {\n\t\t\tconsole.error('API Error:', err.response);\n\t\t\tlet message = err.response.data.error.message;\n\t\t\tthrow Array.isArray(message) ? message : [ message ];\n\t\t}\n\t}\n\n\t// Individual API routes\n\n\t/** Get the current user. */\n\n\tstatic async getCurrentUser(username) {\n\t\tlet res = await this.request(`users/${username}`);\n\t\treturn res.user;\n\t}\n\n\t/** Get companies (filtered by name if not undefined) */\n\n\tstatic async getCompanies(name) {\n\t\tlet res = await this.request('companies', { name });\n\t\treturn res.companies;\n\t}\n\n\t/** Get details on a company by handle. */\n\n\tstatic async getCompany(handle) {\n\t\tlet res = await this.request(`companies/${handle}`);\n\t\treturn res.company;\n\t}\n\n\t/** Get list of jobs (filtered by title if not undefined) */\n\n\tstatic async getJobs(title) {\n\t\tlet res = await this.request('jobs', { title });\n\t\treturn res.jobs;\n\t}\n\n\t/** Apply to a job */\n\n\tstatic async applyToJob(username, id) {\n\t\tawait this.request(`users/${username}/jobs/${id}`, {}, 'post');\n\t}\n\n\t/** Get token for login from username, password. */\n\n\tstatic async login(data) {\n\t\tlet res = await this.request(`auth/token`, data, 'post');\n\t\treturn res.token;\n\t}\n\n\t/** Signup for site. */\n\n\tstatic async signup(data) {\n\t\tlet res = await this.request(`auth/register`, data, 'post');\n\t\treturn res.token;\n\t}\n\n\t/** Save user profile page. */\n\n\tstatic async saveProfile(username, data) {\n\t\tlet res = await this.request(`users/${username}`, data, 'patch');\n\t\treturn res.user;\n\t}\n}\n\nexport default JoblyApi;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./CompanyCard.css\";\n\n/** Show limited information about a company\n *\n * Is rendered by CompanyList to show a \"card\" for each company.\n *\n * CompanyList -> CompanyCard\n */\n\nfunction CompanyCard({ name, description, logoUrl, handle }) {\n  console.debug(\"CompanyCard\", logoUrl);\n\n  return (\n      <Link className=\"CompanyCard card\" to={`/companies/${handle}`}>\n        <div className=\"card-body\">\n          <h6 className=\"card-title\">\n            {name}\n            {logoUrl && <img src={logoUrl}\n                             alt={name}\n                             className=\"float-right ml-5\" />}\n          </h6>\n          <p><small>{description}</small></p>\n        </div>\n      </Link>\n  );\n}\n\nexport default CompanyCard;\n","import React from 'react';\nimport './LoadingSpinner.css';\n\n/** Loading message used by components that fetch API data. */\n\nfunction LoadingSpinner() {\n\treturn <div className='LoadingSpinner'>Please wait...</div>;\n}\n\nexport default LoadingSpinner;\n","import React, { useState, useEffect } from \"react\";\nimport SearchForm from \"../common/SearchForm\";\nimport JoblyApi from \"../api/api\";\nimport CompanyCard from \"./CompanyCard\";\nimport LoadingSpinner from \"../common/LoadingSpinner\";\n\n/** Show page with list of companies.\n *\n * On mount, loads companies from API.\n * Re-loads filtered companies on submit from search form.\n *\n * This is routed to at /companies\n *\n * Routes -> { CompanyCard, SearchForm }\n */\n\nfunction CompanyList() {\n  console.debug(\"CompanyList\");\n\n  const [companies, setCompanies] = useState(null);\n\n  useEffect(function getCompaniesOnMount() {\n    console.debug(\"CompanyList useEffect getCompaniesOnMount\");\n    search();\n  }, []);\n\n  /** Triggered by search form submit; reloads companies. */\n  async function search(name) {\n    let companies = await JoblyApi.getCompanies(name);\n    setCompanies(companies);\n  }\n\n  if (!companies) return <LoadingSpinner />;\n\n  return (\n      <div className=\"CompanyList col-md-8 offset-md-2\">\n        <SearchForm searchFor={search} />\n        {companies.length\n            ? (\n                <div className=\"CompanyList-list\">\n                  {companies.map(c => (\n                      <CompanyCard\n                          key={c.handle}\n                          handle={c.handle}\n                          name={c.name}\n                          description={c.description}\n                          logoUrl={c.logoUrl}\n                      />\n                  ))}\n                </div>\n            ) : (\n                <p className=\"lead\">Sorry, no results were found!</p>\n            )}\n      </div>\n  );\n}\n\nexport default CompanyList;\n","import React, { useContext, useState } from \"react\";\nimport \"./JobCard.css\";\nimport UserContext from \"../auth/UserContext\";\n\n/** Show limited information about a job.\n *\n * Is rendered by JobCardList to show a \"card\" for each job.\n *\n * Receives apply func prop from parent, which is called on apply.\n *\n * JobCardList -> JobCard\n */\n\nfunction JobCard({ id, title, salary, equity, companyName }) {\n  console.debug(\"JobCard\");\n\n  const { hasAppliedToJob, applyToJob } = useContext(UserContext);\n  const [applied, setApplied] = useState();\n\n  React.useEffect(function updateAppliedStatus() {\n    console.debug(\"JobCard useEffect updateAppliedStatus\", \"id=\", id);\n\n    setApplied(hasAppliedToJob(id));\n  }, [id, hasAppliedToJob]);\n\n  /** Apply for a job */\n  async function handleApply(evt) {\n    if (hasAppliedToJob(id)) return;\n    applyToJob(id);\n    setApplied(true);\n  }\n\n  return (\n      <div className=\"JobCard card\"> {applied}\n        <div className=\"card-body\">\n          <h6 className=\"card-title\">{title}</h6>\n          <p>{companyName}</p>\n          {salary && <div><small>Salary: {formatSalary(salary)}</small></div>}\n          {equity !== undefined && <div><small>Equity: {equity}</small></div>}\n          <button\n              className=\"btn btn-danger font-weight-bold text-uppercase float-right\"\n              onClick={handleApply}\n              disabled={applied}\n          >\n            {applied ? \"Applied\" : \"Apply\"}\n          </button>\n        </div>\n      </div>\n  );\n}\n\n/** Render integer salary like '$1,250,343' */\n\nfunction formatSalary(salary) {\n  const digitsRev = [];\n  const salaryStr = salary.toString();\n\n  for (let i = salaryStr.length - 1; i >= 0; i--) {\n    digitsRev.push(salaryStr[i]);\n    if (i > 0 && i % 3 === 0) digitsRev.push(\",\");\n  }\n\n  return digitsRev.reverse().join(\"\");\n}\n\n\nexport default JobCard;\n","import React from \"react\";\nimport JobCard from \"./JobCard\";\n\n/** Show list of job cards.\n *\n * Used by both JobList and CompanyDetail to list jobs. Receives an apply\n * func prop which will be called by JobCard on apply.\n *\n * JobList -> JobCardList -> JobCard\n * CompanyDetail -> JobCardList -> JobCard\n *\n */\n\nfunction JobCardList({ jobs, apply }) {\n  console.debug(\"JobCardList\", \"jobs=\", jobs);\n\n  return (\n      <div className=\"JobCardList\">\n        {jobs.map(job => (\n            <JobCard\n                key={job.id}\n                id={job.id}\n                title={job.title}\n                salary={job.salary}\n                equity={job.equity}\n                companyName={job.companyName}\n            />\n        ))}\n      </div>\n  );\n}\n\nexport default JobCardList;\n","import React, { useState, useEffect } from \"react\";\nimport Search from \"../common/SearchForm\";\nimport JoblyApi from \"../api/api\";\nimport JobCardList from \"./JobCardList\";\nimport LoadingSpinner from \"../common/LoadingSpinner\";\n\n/** Show page with list of jobs.\n *\n * On mount, loads jobs from API.\n * Re-loads filtered jobs on submit from search form.\n *\n * JobList -> JobCardList -> JobCard\n *\n * This is routed to at /jobs\n */\n\nfunction JobList() {\n  console.debug(\"JobList\");\n\n  const [jobs, setJobs] = useState(null);\n\n  useEffect(function getAllJobsOnMount() {\n    console.debug(\"JobList useEffect getAllJobsOnMount\");\n    search();\n  }, []);\n\n  /** Triggered by search form submit; reloads jobs. */\n  async function search(title) {\n    let jobs = await JoblyApi.getJobs(title);\n    setJobs(jobs);\n  }\n\n  if (!jobs) return <LoadingSpinner />;\n\n  return (\n      <div className=\"JobList col-md-8 offset-md-2\">\n        <Search searchFor={search} />\n        {jobs.length\n            ? <JobCardList jobs={jobs} />\n            : <p className=\"lead\">Sorry, no results were found!</p>\n        }\n      </div>\n  );\n}\n\nexport default JobList;\n","import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport JoblyApi from \"../api/api\";\nimport JobCardList from \"../jobs/JobCardList\";\nimport LoadingSpinner from \"../common/LoadingSpinner\";\n\n/** Company Detail page.\n *\n * Renders information about company, along with the jobs at that company.\n *\n * Routed at /companies/:handle\n *\n * Routes -> CompanyDetail -> JobCardList\n */\n\nfunction CompanyDetail() {\n  const { handle } = useParams();\n  console.debug(\"CompanyDetail\", \"handle=\", handle);\n\n  const [company, setCompany] = useState(null);\n\n  useEffect(function getCompanyAndJobsForUser() {\n    async function getCompany() {\n      setCompany(await JoblyApi.getCompany(handle));\n    }\n\n    getCompany();\n  }, [handle]);\n\n  if (!company) return <LoadingSpinner />;\n\n  return (\n      <div className=\"CompanyDetail col-md-8 offset-md-2\">\n        <h4>{company.name}</h4>\n        <p>{company.description}</p>\n        <JobCardList jobs={company.jobs} />\n      </div>\n  );\n}\n\nexport default CompanyDetail;\n","import React from \"react\";\n\n/** Presentational component for showing bootstrap-style alerts.\n *\n * { LoginForm, SignupForm, ProfileForm } -> Alert\n **/\n\nfunction Alert({ type = \"danger\", messages = [] }) {\n  console.debug(\"Alert\", \"type=\", type, \"messages=\", messages);\n\n  return (\n      <div className={`alert alert-${type}`} role=\"alert\">\n        {messages.map(error => (\n            <p className=\"mb-0 small\" key={error}>\n              {error}\n            </p>\n        ))}\n      </div>\n  );\n}\n\nexport default Alert;\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Alert from \"../common/Alert\";\n\n/** Login form.\n *\n * Shows form and manages update to state on changes.\n * On submission:\n * - calls login function prop\n * - redirects to /companies route\n *\n * Routes -> LoginForm -> Alert\n * Routed as /login\n */\n\nfunction LoginForm({ login }) {\n  const history = useHistory();\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\",\n  });\n  const [formErrors, setFormErrors] = useState([]);\n\n  console.debug(\n      \"LoginForm\",\n      \"login=\", typeof login,\n      \"formData=\", formData,\n      \"formErrors\", formErrors,\n  );\n\n  /** Handle form submit:\n   *\n   * Calls login func prop and, if successful, redirect to /companies.\n   */\n\n  async function handleSubmit(evt) {\n    evt.preventDefault();\n    let result = await login(formData);\n    if (result.success) {\n      history.push(\"/companies\");\n    } else {\n      setFormErrors(result.errors);\n    }\n  }\n\n  /** Update form data field */\n  function handleChange(evt) {\n    const { name, value } = evt.target;\n    setFormData(l => ({ ...l, [name]: value }));\n  }\n\n  return (\n      <div className=\"LoginForm\">\n        <div className=\"container col-md-6 offset-md-3 col-lg-4 offset-lg-4\">\n          <h3 className=\"mb-3\">Log In</h3>\n\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <form onSubmit={handleSubmit}>\n                <div className=\"form-group\">\n                  <label>Username</label>\n                  <input\n                      name=\"username\"\n                      className=\"form-control\"\n                      value={formData.username}\n                      onChange={handleChange}\n                      autoComplete=\"username\"\n                      required\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Password</label>\n                  <input\n                      type=\"password\"\n                      name=\"password\"\n                      className=\"form-control\"\n                      value={formData.password}\n                      onChange={handleChange}\n                      autoComplete=\"current-password\"\n                      required\n                  />\n                </div>\n\n                {formErrors.length\n                    ? <Alert type=\"danger\" messages={formErrors} />\n                    : null}\n\n                <button\n                    className=\"btn btn-primary float-right\"\n                    onSubmit={handleSubmit}\n                >\n                  Submit\n                </button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n  );\n}\n\nexport default LoginForm;\n","import React, { useState, useContext } from \"react\";\nimport Alert from \"../common/Alert\";\nimport JoblyApi from \"../api/api\";\nimport UserContext from \"../auth/UserContext\";\n\n// eslint-disable-next-line\nimport useTimedMessage from \"../hooks/useTimedMessage\";\n\n/** Profile editing form.\n *\n * Displays profile form and handles changes to local form state.\n * Submitting the form calls the API to save, and triggers user reloading\n * throughout the site.\n *\n * Confirmation of a successful save is normally a simple <Alert>, but\n * you can opt-in to our fancy limited-time-display message hook,\n * `useTimedMessage`, but switching the lines below.\n *\n * Routed as /profile\n * Routes -> ProfileForm -> Alert\n */\n\nfunction ProfileForm() {\n  const { currentUser, setCurrentUser } = useContext(UserContext);\n  const [formData, setFormData] = useState({\n    firstName: currentUser.firstName,\n    lastName: currentUser.lastName,\n    email: currentUser.email,\n    username: currentUser.username,\n    password: \"\",\n  });\n  const [formErrors, setFormErrors] = useState([]);\n\n  // switch to use our fancy limited-time-display message hook\n  const [saveConfirmed, setSaveConfirmed] = useState(false);\n  // const [saveConfirmed, setSaveConfirmed] = useTimedMessage()\n\n  console.debug(\n      \"ProfileForm\",\n      \"currentUser=\", currentUser,\n      \"formData=\", formData,\n      \"formErrors=\", formErrors,\n      \"saveConfirmed=\", saveConfirmed,\n  );\n\n  /** on form submit:\n   * - attempt save to backend & report any errors\n   * - if successful\n   *   - clear previous error messages and password\n   *   - show save-confirmed message\n   *   - set current user info throughout the site\n   */\n\n  async function handleSubmit(evt) {\n    evt.preventDefault();\n\n    let profileData = {\n      firstName: formData.firstName,\n      lastName: formData.lastName,\n      email: formData.email,\n      password: formData.password,\n    };\n\n    let username = formData.username;\n    let updatedUser;\n\n    try {\n      updatedUser = await JoblyApi.saveProfile(username, profileData);\n    } catch (errors) {\n      debugger;\n      setFormErrors(errors);\n      return;\n    }\n\n    setFormData(f => ({ ...f, password: \"\" }));\n    setFormErrors([]);\n    setSaveConfirmed(true);\n\n    // trigger reloading of user information throughout the site\n    setCurrentUser(updatedUser);\n  }\n\n  /** Handle form data changing */\n  function handleChange(evt) {\n    const { name, value } = evt.target;\n    setFormData(f => ({\n      ...f,\n      [name]: value,\n    }));\n    setFormErrors([]);\n  }\n\n  return (\n      <div className=\"col-md-6 col-lg-4 offset-md-3 offset-lg-4\">\n        <h3>Profile</h3>\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <form>\n              <div className=\"form-group\">\n                <label>Username</label>\n                <p className=\"form-control-plaintext\">{formData.username}</p>\n              </div>\n              <div className=\"form-group\">\n                <label>First Name</label>\n                <input\n                    name=\"firstName\"\n                    className=\"form-control\"\n                    value={formData.firstName}\n                    onChange={handleChange}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label>Last Name</label>\n                <input\n                    name=\"lastName\"\n                    className=\"form-control\"\n                    value={formData.lastName}\n                    onChange={handleChange}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label>Email</label>\n                <input\n                    name=\"email\"\n                    className=\"form-control\"\n                    value={formData.email}\n                    onChange={handleChange}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label>Confirm password to make changes:</label>\n                <input\n                    type=\"password\"\n                    name=\"password\"\n                    className=\"form-control\"\n                    value={formData.password}\n                    onChange={handleChange}\n                />\n              </div>\n\n              {formErrors.length\n                  ? <Alert type=\"danger\" messages={formErrors} />\n                  : null}\n\n              {saveConfirmed\n                  ?\n                  <Alert type=\"success\" messages={[\"Updated successfully.\"]} />\n                  : null}\n\n              <button\n                  className=\"btn btn-primary btn-block mt-4\"\n                  onClick={handleSubmit}\n              >\n                Save Changes\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n  );\n}\n\nexport default ProfileForm;\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Alert from '../common/Alert';\n\n/** Signup form.\n *\n * Shows form and manages update to state on changes.\n * On submission:\n * - calls signup function prop\n * - redirects to /companies route\n *\n * Routes -> SignupForm -> Alert\n * Routed as /signup\n */\n\nfunction SignupForm({ signup }) {\n\tconst history = useHistory();\n\tconst [ formData, setFormData ] = useState({\n\t\tusername: '',\n\t\tpassword: '',\n\t\tfirstName: '',\n\t\tlastName: '',\n\t\temail: ''\n\t});\n\tconst [ formErrors, setFormErrors ] = useState([]);\n\n\tconsole.debug('SignupForm', 'signup=', typeof signup, 'formData=', formData, 'formErrors=', formErrors);\n\n\t/** Handle form submit:\n   *\n   * Calls login func prop and, if successful, redirect to /companies.\n   */\n\n\tasync function handleSubmit(evt) {\n\t\tevt.preventDefault();\n\t\tlet result = await signup(formData);\n\t\tif (result.success) {\n\t\t\thistory.push('/companies');\n\t\t}\n\t\telse {\n\t\t\tsetFormErrors(result.errors);\n\t\t}\n\t}\n\n\t/** Update form data field */\n\tfunction handleChange(evt) {\n\t\tconst { name, value } = evt.target;\n\t\tsetFormData((data) => ({ ...data, [name]: value }));\n\t}\n\n\treturn (\n\t\t<div className='SignupForm'>\n\t\t\t<div className='container col-md-6 offset-md-3 col-lg-4 offset-lg-4'>\n\t\t\t\t<h2 className='mb-3'>Sign Up</h2>\n\t\t\t\t<div className='card'>\n\t\t\t\t\t<div className='card-body'>\n\t\t\t\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t\t\t\t<div className='form-group'>\n\t\t\t\t\t\t\t\t<label>Username</label>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tname='username'\n\t\t\t\t\t\t\t\t\tclassName='form-control'\n\t\t\t\t\t\t\t\t\tvalue={formData.username}\n\t\t\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='form-group'>\n\t\t\t\t\t\t\t\t<label>Password</label>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\t\t\t\tname='password'\n\t\t\t\t\t\t\t\t\tclassName='form-control'\n\t\t\t\t\t\t\t\t\tautoComplete='current-password'\n\t\t\t\t\t\t\t\t\tvalue={formData.password}\n\t\t\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div className='form-group'>\n\t\t\t\t\t\t\t\t<label>First name</label>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tname='firstName'\n\t\t\t\t\t\t\t\t\tclassName='form-control'\n\t\t\t\t\t\t\t\t\tvalue={formData.firstName}\n\t\t\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='form-group'>\n\t\t\t\t\t\t\t\t<label>Last name</label>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tname='lastName'\n\t\t\t\t\t\t\t\t\tclassName='form-control'\n\t\t\t\t\t\t\t\t\tvalue={formData.lastName}\n\t\t\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='form-group'>\n\t\t\t\t\t\t\t\t<label>Email</label>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype='email'\n\t\t\t\t\t\t\t\t\tname='email'\n\t\t\t\t\t\t\t\t\tclassName='form-control'\n\t\t\t\t\t\t\t\t\tvalue={formData.email}\n\t\t\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t{formErrors.length ? <Alert type='danger' messages={formErrors} /> : null}\n\n\t\t\t\t\t\t\t<button type='submit' className='btn btn-primary float-right' onSubmit={handleSubmit}>\n\t\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default SignupForm;\n","import React, { useContext } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport UserContext from \"../auth/UserContext\";\n\n/** \"Higher-Order Component\" for private routes.\n *\n * In routing component, use these instead of <Route ...>. This component\n * will check if there is a valid current user and only continues to the\n * route if so. If no user is present, redirects to login form.\n */\n\nfunction PrivateRoute({ exact, path, children }) {\n  const { currentUser } = useContext(UserContext);\n\n  console.debug(\n      \"PrivateRoute\",\n      \"exact=\", exact,\n      \"path=\", path,\n      \"currentUser=\", currentUser,\n  );\n\n  if (!currentUser) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  return (\n      <Route exact={exact} path={path}>\n        {children}\n      </Route>\n  );\n}\n\nexport default PrivateRoute;\n","import React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport Homepage from \"../homepage/Homepage\";\nimport CompanyList from \"../companies/CompanyList\";\nimport JobList from \"../jobs/JobList\";\nimport CompanyDetail from \"../companies/CompanyDetail\";\nimport LoginForm from \"../auth/LoginForm\";\nimport ProfileForm from \"../profiles/ProfileForm\";\nimport SignupForm from \"../auth/SignupForm\";\nimport PrivateRoute from \"./PrivateRoute\";\n\n/** Site-wide routes.\n *\n * Parts of site should only be visitable when logged in. Those routes are\n * wrapped by <PrivateRoute>, which is an authorization component.\n *\n * Visiting a non-existant route redirects to the homepage.\n */\n\nfunction Routes({ login, signup }) {\n  console.debug(\n      \"Routes\",\n      `login=${typeof login}`,\n      `register=${typeof register}`,\n  );\n\n  return (\n      <div className=\"pt-5\">\n        <Switch>\n\n          <Route exact path=\"/\">\n            <Homepage />\n          </Route>\n\n          <Route exact path=\"/login\">\n            <LoginForm login={login} />\n          </Route>\n\n          <Route exact path=\"/signup\">\n            <SignupForm signup={signup} />\n          </Route>\n\n          <PrivateRoute exact path=\"/companies\">\n            <CompanyList />\n          </PrivateRoute>\n\n          <PrivateRoute exact path=\"/jobs\">\n            <JobList />\n          </PrivateRoute>\n\n          <PrivateRoute exact path=\"/companies/:handle\">\n            <CompanyDetail />\n          </PrivateRoute>\n\n          <PrivateRoute path=\"/profile\">\n            <ProfileForm />\n          </PrivateRoute>\n\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n  );\n}\n\nexport default Routes;\n","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport useLocalStorage from './hooks/useLocalStorage';\nimport Navigation from './routes-nav/Navigation';\nimport Routes from './routes-nav/Routes';\nimport LoadingSpinner from './common/LoadingSpinner';\nimport JoblyApi from './api/api';\nimport UserContext from './auth/UserContext';\nimport jwt from 'jsonwebtoken';\n\n// Key name for storing token in localStorage for \"remember me\" re-login\nexport const TOKEN_STORAGE_ID = 'jobly-token';\n\n/** Jobly application.\n *\n * - infoLoaded: has user data been pulled from API?\n *   (this manages spinner for \"loading...\")\n *\n * - currentUser: user obj from API. This becomes the canonical way to tell\n *   if someone is logged in. This is passed around via context throughout app.\n *\n * - token: for logged in users, this is their authentication JWT.\n *   Is required to be set for most API calls. This is initially read from\n *   localStorage and synced to there via the useLocalStorage hook.\n *\n * App -> Routes\n */\n\nfunction App() {\n\tconst [ infoLoaded, setInfoLoaded ] = useState(false);\n\tconst [ applicationIds, setApplicationIds ] = useState(new Set([]));\n\tconst [ currentUser, setCurrentUser ] = useState(null);\n\tconst [ token, setToken ] = useLocalStorage(TOKEN_STORAGE_ID);\n\n\tconsole.debug('App', 'infoLoaded=', infoLoaded, 'currentUser=', currentUser, 'token=', token);\n\n\t// Load user info from API. Until a user is logged in and they have a token,\n\t// this should not run. It only needs to re-run when a user logs out, so\n\t// the value of the token is a dependency for this effect.\n\n\tuseEffect(\n\t\tfunction loadUserInfo() {\n\t\t\tconsole.debug('App useEffect loadUserInfo', 'token=', token);\n\n\t\t\tasync function getCurrentUser() {\n\t\t\t\tif (token) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlet { username } = jwt.decode(token);\n\t\t\t\t\t\t// put the token on the Api class so it can use it to call the API.\n\t\t\t\t\t\tJoblyApi.token = token;\n\t\t\t\t\t\tlet currentUser = await JoblyApi.getCurrentUser(username);\n\t\t\t\t\t\tsetCurrentUser(currentUser);\n\t\t\t\t\t\tsetApplicationIds(new Set(currentUser.applications));\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tconsole.error('App loadUserInfo: problem loading', err);\n\t\t\t\t\t\tsetCurrentUser(null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsetInfoLoaded(true);\n\t\t\t}\n\n\t\t\t// set infoLoaded to false while async getCurrentUser runs; once the\n\t\t\t// data is fetched (or even if an error happens!), this will be set back\n\t\t\t// to false to control the spinner.\n\t\t\tsetInfoLoaded(false);\n\t\t\tgetCurrentUser();\n\t\t},\n\t\t[ token ]\n\t);\n\n\t/** Handles site-wide logout. */\n\tfunction logout() {\n\t\tsetCurrentUser(null);\n\t\tsetToken(null);\n\t}\n\n\t/** Handles site-wide signup.\n   *\n   * Automatically logs them in (set token) upon signup.\n   *\n   * Make sure you await this function and check its return value!\n   */\n\tasync function signup(signupData) {\n\t\ttry {\n\t\t\tlet token = await JoblyApi.signup(signupData);\n\t\t\tsetToken(token);\n\t\t\treturn { success: true };\n\t\t} catch (errors) {\n\t\t\tconsole.error('signup failed', errors);\n\t\t\treturn { success: false, errors };\n\t\t}\n\t}\n\n\t/** Handles site-wide login.\n   *\n   * Make sure you await this function and check its return value!\n   */\n\tasync function login(loginData) {\n\t\ttry {\n\t\t\tlet token = await JoblyApi.login(loginData);\n\t\t\tsetToken(token);\n\t\t\treturn { success: true };\n\t\t} catch (errors) {\n\t\t\tconsole.error('login failed', errors);\n\t\t\treturn { success: false, errors };\n\t\t}\n\t}\n\n\t/** Checks if a job has been applied for. */\n\tfunction hasAppliedToJob(id) {\n\t\treturn applicationIds.has(id);\n\t}\n\n\t/** Apply to a job: make API call and update set of application IDs. */\n\tfunction applyToJob(id) {\n\t\tif (hasAppliedToJob(id)) return;\n\t\tJoblyApi.applyToJob(currentUser.username, id);\n\t\tsetApplicationIds(new Set([ ...applicationIds, id ]));\n\t}\n\n\tif (!infoLoaded) return <LoadingSpinner />;\n\n\treturn (\n\t\t<BrowserRouter>\n\t\t\t<UserContext.Provider value={{ currentUser, setCurrentUser, hasAppliedToJob, applyToJob }}>\n\t\t\t\t<div className='App'>\n\t\t\t\t\t<Navigation logout={logout} />\n\t\t\t\t\t<Routes login={login} signup={signup} />\n\t\t\t\t</div>\n\t\t\t</UserContext.Provider>\n\t\t</BrowserRouter>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === \"installed\") {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                    \"New content is available and will be used when all \" +\n                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log(\"Content is cached for offline use.\");\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error(\"Error during service worker registration:\", error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get(\"content-type\");\n        if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf(\"javascript\") === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n            \"No internet connection found. App is running in offline mode.\",\n        );\n      });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}